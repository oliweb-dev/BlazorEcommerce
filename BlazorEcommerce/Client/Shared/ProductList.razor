@inject IProductService productService
@implements IDisposable

@if (productService.Products == null || productService.Products.Count == 0)
{
    <span>Loading products ...</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (Product product in productService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper ">
                    <a href="/product/@product.Id"><img src="@product.ImageUrl" class="media-img" alt="@product.Title"></a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4>@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <div class="price">
                        @GetPriceText(product)
                    </div>
                </div>
            </li>
        }
    </ul>
}
@code {

    protected override void OnInitialized()
    {
        productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"{variants[0].Price}€";
        }

        decimal minPrice = variants.Min(v => v.Price);
        return $"À partir de {minPrice}€";
    }
}
